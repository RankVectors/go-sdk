/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Rollback type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rollback{}

// Rollback struct for Rollback
type Rollback struct {
	// Unique rollback identifier
	Id string `json:"id"`
	// Reason for rollback
	Reason string `json:"reason"`
	// Rollback timestamp
	CreatedAt time.Time `json:"createdAt"`
	// Credits refunded
	CreditsRefunded *float32 `json:"creditsRefunded,omitempty"`
}

type _Rollback Rollback

// NewRollback instantiates a new Rollback object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRollback(id string, reason string, createdAt time.Time) *Rollback {
	this := Rollback{}
	this.Id = id
	this.Reason = reason
	this.CreatedAt = createdAt
	return &this
}

// NewRollbackWithDefaults instantiates a new Rollback object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRollbackWithDefaults() *Rollback {
	this := Rollback{}
	return &this
}

// GetId returns the Id field value
func (o *Rollback) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Rollback) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Rollback) SetId(v string) {
	o.Id = v
}

// GetReason returns the Reason field value
func (o *Rollback) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Rollback) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Rollback) SetReason(v string) {
	o.Reason = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Rollback) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Rollback) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Rollback) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreditsRefunded returns the CreditsRefunded field value if set, zero value otherwise.
func (o *Rollback) GetCreditsRefunded() float32 {
	if o == nil || IsNil(o.CreditsRefunded) {
		var ret float32
		return ret
	}
	return *o.CreditsRefunded
}

// GetCreditsRefundedOk returns a tuple with the CreditsRefunded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rollback) GetCreditsRefundedOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditsRefunded) {
		return nil, false
	}
	return o.CreditsRefunded, true
}

// HasCreditsRefunded returns a boolean if a field has been set.
func (o *Rollback) HasCreditsRefunded() bool {
	if o != nil && !IsNil(o.CreditsRefunded) {
		return true
	}

	return false
}

// SetCreditsRefunded gets a reference to the given float32 and assigns it to the CreditsRefunded field.
func (o *Rollback) SetCreditsRefunded(v float32) {
	o.CreditsRefunded = &v
}

func (o Rollback) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rollback) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["reason"] = o.Reason
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.CreditsRefunded) {
		toSerialize["creditsRefunded"] = o.CreditsRefunded
	}
	return toSerialize, nil
}

func (o *Rollback) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"reason",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRollback := _Rollback{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRollback)

	if err != nil {
		return err
	}

	*o = Rollback(varRollback)

	return err
}

type NullableRollback struct {
	value *Rollback
	isSet bool
}

func (v NullableRollback) Get() *Rollback {
	return v.value
}

func (v *NullableRollback) Set(val *Rollback) {
	v.value = val
	v.isSet = true
}

func (v NullableRollback) IsSet() bool {
	return v.isSet
}

func (v *NullableRollback) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRollback(val *Rollback) *NullableRollback {
	return &NullableRollback{value: val, isSet: true}
}

func (v NullableRollback) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRollback) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


