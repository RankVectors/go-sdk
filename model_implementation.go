/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Implementation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Implementation{}

// Implementation struct for Implementation
type Implementation struct {
	// Unique implementation identifier
	Id string `json:"id"`
	// Implementation status
	Status string `json:"status"`
	// Platform used
	Platform string `json:"platform"`
	// Implementation method
	ImplementationMethod *string `json:"implementationMethod,omitempty"`
	// Credits consumed
	CreditsUsed float32 `json:"creditsUsed"`
	// Implementation start timestamp
	CreatedAt time.Time `json:"createdAt"`
	// Implementation completion timestamp
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// Platform-specific metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Suggestion Suggestion `json:"suggestion"`
	// Rollback history
	Rollbacks []Rollback `json:"rollbacks,omitempty"`
}

type _Implementation Implementation

// NewImplementation instantiates a new Implementation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementation(id string, status string, platform string, creditsUsed float32, createdAt time.Time, suggestion Suggestion) *Implementation {
	this := Implementation{}
	this.Id = id
	this.Status = status
	this.Platform = platform
	this.CreditsUsed = creditsUsed
	this.CreatedAt = createdAt
	this.Suggestion = suggestion
	return &this
}

// NewImplementationWithDefaults instantiates a new Implementation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationWithDefaults() *Implementation {
	this := Implementation{}
	return &this
}

// GetId returns the Id field value
func (o *Implementation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Implementation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Implementation) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *Implementation) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Implementation) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Implementation) SetStatus(v string) {
	o.Status = v
}

// GetPlatform returns the Platform field value
func (o *Implementation) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *Implementation) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *Implementation) SetPlatform(v string) {
	o.Platform = v
}

// GetImplementationMethod returns the ImplementationMethod field value if set, zero value otherwise.
func (o *Implementation) GetImplementationMethod() string {
	if o == nil || IsNil(o.ImplementationMethod) {
		var ret string
		return ret
	}
	return *o.ImplementationMethod
}

// GetImplementationMethodOk returns a tuple with the ImplementationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Implementation) GetImplementationMethodOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationMethod) {
		return nil, false
	}
	return o.ImplementationMethod, true
}

// HasImplementationMethod returns a boolean if a field has been set.
func (o *Implementation) HasImplementationMethod() bool {
	if o != nil && !IsNil(o.ImplementationMethod) {
		return true
	}

	return false
}

// SetImplementationMethod gets a reference to the given string and assigns it to the ImplementationMethod field.
func (o *Implementation) SetImplementationMethod(v string) {
	o.ImplementationMethod = &v
}

// GetCreditsUsed returns the CreditsUsed field value
func (o *Implementation) GetCreditsUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditsUsed
}

// GetCreditsUsedOk returns a tuple with the CreditsUsed field value
// and a boolean to check if the value has been set.
func (o *Implementation) GetCreditsUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsUsed, true
}

// SetCreditsUsed sets field value
func (o *Implementation) SetCreditsUsed(v float32) {
	o.CreditsUsed = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Implementation) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Implementation) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Implementation) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Implementation) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Implementation) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Implementation) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *Implementation) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Implementation) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Implementation) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Implementation) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Implementation) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetSuggestion returns the Suggestion field value
func (o *Implementation) GetSuggestion() Suggestion {
	if o == nil {
		var ret Suggestion
		return ret
	}

	return o.Suggestion
}

// GetSuggestionOk returns a tuple with the Suggestion field value
// and a boolean to check if the value has been set.
func (o *Implementation) GetSuggestionOk() (*Suggestion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Suggestion, true
}

// SetSuggestion sets field value
func (o *Implementation) SetSuggestion(v Suggestion) {
	o.Suggestion = v
}

// GetRollbacks returns the Rollbacks field value if set, zero value otherwise.
func (o *Implementation) GetRollbacks() []Rollback {
	if o == nil || IsNil(o.Rollbacks) {
		var ret []Rollback
		return ret
	}
	return o.Rollbacks
}

// GetRollbacksOk returns a tuple with the Rollbacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Implementation) GetRollbacksOk() ([]Rollback, bool) {
	if o == nil || IsNil(o.Rollbacks) {
		return nil, false
	}
	return o.Rollbacks, true
}

// HasRollbacks returns a boolean if a field has been set.
func (o *Implementation) HasRollbacks() bool {
	if o != nil && !IsNil(o.Rollbacks) {
		return true
	}

	return false
}

// SetRollbacks gets a reference to the given []Rollback and assigns it to the Rollbacks field.
func (o *Implementation) SetRollbacks(v []Rollback) {
	o.Rollbacks = v
}

func (o Implementation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Implementation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["platform"] = o.Platform
	if !IsNil(o.ImplementationMethod) {
		toSerialize["implementationMethod"] = o.ImplementationMethod
	}
	toSerialize["creditsUsed"] = o.CreditsUsed
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["suggestion"] = o.Suggestion
	if !IsNil(o.Rollbacks) {
		toSerialize["rollbacks"] = o.Rollbacks
	}
	return toSerialize, nil
}

func (o *Implementation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"platform",
		"creditsUsed",
		"createdAt",
		"suggestion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImplementation := _Implementation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImplementation)

	if err != nil {
		return err
	}

	*o = Implementation(varImplementation)

	return err
}

type NullableImplementation struct {
	value *Implementation
	isSet bool
}

func (v NullableImplementation) Get() *Implementation {
	return v.value
}

func (v *NullableImplementation) Set(val *Implementation) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementation) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementation(val *Implementation) *NullableImplementation {
	return &NullableImplementation{value: val, isSet: true}
}

func (v NullableImplementation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


