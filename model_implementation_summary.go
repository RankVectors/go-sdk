/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImplementationSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImplementationSummary{}

// ImplementationSummary struct for ImplementationSummary
type ImplementationSummary struct {
	// Total number of implementations
	Total int32 `json:"total"`
	// Number of successful implementations
	Succeeded int32 `json:"succeeded"`
	// Number of failed implementations
	Failed int32 `json:"failed"`
	// Total credits used
	CreditsUsed float32 `json:"creditsUsed"`
}

type _ImplementationSummary ImplementationSummary

// NewImplementationSummary instantiates a new ImplementationSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementationSummary(total int32, succeeded int32, failed int32, creditsUsed float32) *ImplementationSummary {
	this := ImplementationSummary{}
	this.Total = total
	this.Succeeded = succeeded
	this.Failed = failed
	this.CreditsUsed = creditsUsed
	return &this
}

// NewImplementationSummaryWithDefaults instantiates a new ImplementationSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationSummaryWithDefaults() *ImplementationSummary {
	this := ImplementationSummary{}
	return &this
}

// GetTotal returns the Total field value
func (o *ImplementationSummary) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ImplementationSummary) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ImplementationSummary) SetTotal(v int32) {
	o.Total = v
}

// GetSucceeded returns the Succeeded field value
func (o *ImplementationSummary) GetSucceeded() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value
// and a boolean to check if the value has been set.
func (o *ImplementationSummary) GetSucceededOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Succeeded, true
}

// SetSucceeded sets field value
func (o *ImplementationSummary) SetSucceeded(v int32) {
	o.Succeeded = v
}

// GetFailed returns the Failed field value
func (o *ImplementationSummary) GetFailed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *ImplementationSummary) GetFailedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *ImplementationSummary) SetFailed(v int32) {
	o.Failed = v
}

// GetCreditsUsed returns the CreditsUsed field value
func (o *ImplementationSummary) GetCreditsUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditsUsed
}

// GetCreditsUsedOk returns a tuple with the CreditsUsed field value
// and a boolean to check if the value has been set.
func (o *ImplementationSummary) GetCreditsUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsUsed, true
}

// SetCreditsUsed sets field value
func (o *ImplementationSummary) SetCreditsUsed(v float32) {
	o.CreditsUsed = v
}

func (o ImplementationSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImplementationSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["succeeded"] = o.Succeeded
	toSerialize["failed"] = o.Failed
	toSerialize["creditsUsed"] = o.CreditsUsed
	return toSerialize, nil
}

func (o *ImplementationSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"succeeded",
		"failed",
		"creditsUsed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImplementationSummary := _ImplementationSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImplementationSummary)

	if err != nil {
		return err
	}

	*o = ImplementationSummary(varImplementationSummary)

	return err
}

type NullableImplementationSummary struct {
	value *ImplementationSummary
	isSet bool
}

func (v NullableImplementationSummary) Get() *ImplementationSummary {
	return v.value
}

func (v *NullableImplementationSummary) Set(val *ImplementationSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementationSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementationSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementationSummary(val *ImplementationSummary) *NullableImplementationSummary {
	return &NullableImplementationSummary{value: val, isSet: true}
}

func (v NullableImplementationSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementationSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


