/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the UsageHistoryItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageHistoryItem{}

// UsageHistoryItem struct for UsageHistoryItem
type UsageHistoryItem struct {
	// Usage item identifier
	Id string `json:"id"`
	// Action performed
	Action string `json:"action"`
	// Credits used
	CreditsUsed float32 `json:"creditsUsed"`
	// Usage timestamp
	CreatedAt time.Time `json:"createdAt"`
	// Additional metadata
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type _UsageHistoryItem UsageHistoryItem

// NewUsageHistoryItem instantiates a new UsageHistoryItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageHistoryItem(id string, action string, creditsUsed float32, createdAt time.Time) *UsageHistoryItem {
	this := UsageHistoryItem{}
	this.Id = id
	this.Action = action
	this.CreditsUsed = creditsUsed
	this.CreatedAt = createdAt
	return &this
}

// NewUsageHistoryItemWithDefaults instantiates a new UsageHistoryItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageHistoryItemWithDefaults() *UsageHistoryItem {
	this := UsageHistoryItem{}
	return &this
}

// GetId returns the Id field value
func (o *UsageHistoryItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UsageHistoryItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UsageHistoryItem) SetId(v string) {
	o.Id = v
}

// GetAction returns the Action field value
func (o *UsageHistoryItem) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *UsageHistoryItem) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *UsageHistoryItem) SetAction(v string) {
	o.Action = v
}

// GetCreditsUsed returns the CreditsUsed field value
func (o *UsageHistoryItem) GetCreditsUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditsUsed
}

// GetCreditsUsedOk returns a tuple with the CreditsUsed field value
// and a boolean to check if the value has been set.
func (o *UsageHistoryItem) GetCreditsUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsUsed, true
}

// SetCreditsUsed sets field value
func (o *UsageHistoryItem) SetCreditsUsed(v float32) {
	o.CreditsUsed = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UsageHistoryItem) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UsageHistoryItem) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UsageHistoryItem) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UsageHistoryItem) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageHistoryItem) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UsageHistoryItem) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *UsageHistoryItem) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o UsageHistoryItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageHistoryItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["action"] = o.Action
	toSerialize["creditsUsed"] = o.CreditsUsed
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *UsageHistoryItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"action",
		"creditsUsed",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsageHistoryItem := _UsageHistoryItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsageHistoryItem)

	if err != nil {
		return err
	}

	*o = UsageHistoryItem(varUsageHistoryItem)

	return err
}

type NullableUsageHistoryItem struct {
	value *UsageHistoryItem
	isSet bool
}

func (v NullableUsageHistoryItem) Get() *UsageHistoryItem {
	return v.value
}

func (v *NullableUsageHistoryItem) Set(val *UsageHistoryItem) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageHistoryItem) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageHistoryItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageHistoryItem(val *UsageHistoryItem) *NullableUsageHistoryItem {
	return &NullableUsageHistoryItem{value: val, isSet: true}
}

func (v NullableUsageHistoryItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageHistoryItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


