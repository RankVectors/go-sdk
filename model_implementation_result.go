/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImplementationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImplementationResult{}

// ImplementationResult struct for ImplementationResult
type ImplementationResult struct {
	// Whether implementation succeeded
	Success bool `json:"success"`
	// Implementation identifier
	ImplementationId *string `json:"implementationId,omitempty"`
	// Credits consumed
	CreditsUsed *float32 `json:"creditsUsed,omitempty"`
	// Error message if failed
	Error *string `json:"error,omitempty"`
}

type _ImplementationResult ImplementationResult

// NewImplementationResult instantiates a new ImplementationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementationResult(success bool) *ImplementationResult {
	this := ImplementationResult{}
	this.Success = success
	return &this
}

// NewImplementationResultWithDefaults instantiates a new ImplementationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationResultWithDefaults() *ImplementationResult {
	this := ImplementationResult{}
	return &this
}

// GetSuccess returns the Success field value
func (o *ImplementationResult) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ImplementationResult) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ImplementationResult) SetSuccess(v bool) {
	o.Success = v
}

// GetImplementationId returns the ImplementationId field value if set, zero value otherwise.
func (o *ImplementationResult) GetImplementationId() string {
	if o == nil || IsNil(o.ImplementationId) {
		var ret string
		return ret
	}
	return *o.ImplementationId
}

// GetImplementationIdOk returns a tuple with the ImplementationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationResult) GetImplementationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationId) {
		return nil, false
	}
	return o.ImplementationId, true
}

// HasImplementationId returns a boolean if a field has been set.
func (o *ImplementationResult) HasImplementationId() bool {
	if o != nil && !IsNil(o.ImplementationId) {
		return true
	}

	return false
}

// SetImplementationId gets a reference to the given string and assigns it to the ImplementationId field.
func (o *ImplementationResult) SetImplementationId(v string) {
	o.ImplementationId = &v
}

// GetCreditsUsed returns the CreditsUsed field value if set, zero value otherwise.
func (o *ImplementationResult) GetCreditsUsed() float32 {
	if o == nil || IsNil(o.CreditsUsed) {
		var ret float32
		return ret
	}
	return *o.CreditsUsed
}

// GetCreditsUsedOk returns a tuple with the CreditsUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationResult) GetCreditsUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditsUsed) {
		return nil, false
	}
	return o.CreditsUsed, true
}

// HasCreditsUsed returns a boolean if a field has been set.
func (o *ImplementationResult) HasCreditsUsed() bool {
	if o != nil && !IsNil(o.CreditsUsed) {
		return true
	}

	return false
}

// SetCreditsUsed gets a reference to the given float32 and assigns it to the CreditsUsed field.
func (o *ImplementationResult) SetCreditsUsed(v float32) {
	o.CreditsUsed = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ImplementationResult) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImplementationResult) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ImplementationResult) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ImplementationResult) SetError(v string) {
	o.Error = &v
}

func (o ImplementationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImplementationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	if !IsNil(o.ImplementationId) {
		toSerialize["implementationId"] = o.ImplementationId
	}
	if !IsNil(o.CreditsUsed) {
		toSerialize["creditsUsed"] = o.CreditsUsed
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

func (o *ImplementationResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImplementationResult := _ImplementationResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImplementationResult)

	if err != nil {
		return err
	}

	*o = ImplementationResult(varImplementationResult)

	return err
}

type NullableImplementationResult struct {
	value *ImplementationResult
	isSet bool
}

func (v NullableImplementationResult) Get() *ImplementationResult {
	return v.value
}

func (v *NullableImplementationResult) Set(val *ImplementationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementationResult(val *ImplementationResult) *NullableImplementationResult {
	return &NullableImplementationResult{value: val, isSet: true}
}

func (v NullableImplementationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


