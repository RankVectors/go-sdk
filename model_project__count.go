/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
)

// checks if the ProjectCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCount{}

// ProjectCount Count of related entities
type ProjectCount struct {
	Pages *int32 `json:"pages,omitempty"`
	Suggestions *int32 `json:"suggestions,omitempty"`
}

// NewProjectCount instantiates a new ProjectCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCount() *ProjectCount {
	this := ProjectCount{}
	return &this
}

// NewProjectCountWithDefaults instantiates a new ProjectCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCountWithDefaults() *ProjectCount {
	this := ProjectCount{}
	return &this
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *ProjectCount) GetPages() int32 {
	if o == nil || IsNil(o.Pages) {
		var ret int32
		return ret
	}
	return *o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCount) GetPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *ProjectCount) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given int32 and assigns it to the Pages field.
func (o *ProjectCount) SetPages(v int32) {
	o.Pages = &v
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise.
func (o *ProjectCount) GetSuggestions() int32 {
	if o == nil || IsNil(o.Suggestions) {
		var ret int32
		return ret
	}
	return *o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCount) GetSuggestionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Suggestions) {
		return nil, false
	}
	return o.Suggestions, true
}

// HasSuggestions returns a boolean if a field has been set.
func (o *ProjectCount) HasSuggestions() bool {
	if o != nil && !IsNil(o.Suggestions) {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given int32 and assigns it to the Suggestions field.
func (o *ProjectCount) SetSuggestions(v int32) {
	o.Suggestions = &v
}

func (o ProjectCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pages) {
		toSerialize["pages"] = o.Pages
	}
	if !IsNil(o.Suggestions) {
		toSerialize["suggestions"] = o.Suggestions
	}
	return toSerialize, nil
}

type NullableProjectCount struct {
	value *ProjectCount
	isSet bool
}

func (v NullableProjectCount) Get() *ProjectCount {
	return v.value
}

func (v *NullableProjectCount) Set(val *ProjectCount) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCount) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCount(val *ProjectCount) *NullableProjectCount {
	return &NullableProjectCount{value: val, isSet: true}
}

func (v NullableProjectCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


