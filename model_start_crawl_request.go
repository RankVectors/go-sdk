/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
)

// checks if the StartCrawlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartCrawlRequest{}

// StartCrawlRequest struct for StartCrawlRequest
type StartCrawlRequest struct {
	// Maximum number of pages to crawl
	Limit *int32 `json:"limit,omitempty"`
}

// NewStartCrawlRequest instantiates a new StartCrawlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartCrawlRequest() *StartCrawlRequest {
	this := StartCrawlRequest{}
	return &this
}

// NewStartCrawlRequestWithDefaults instantiates a new StartCrawlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartCrawlRequestWithDefaults() *StartCrawlRequest {
	this := StartCrawlRequest{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *StartCrawlRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartCrawlRequest) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *StartCrawlRequest) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *StartCrawlRequest) SetLimit(v int32) {
	o.Limit = &v
}

func (o StartCrawlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartCrawlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableStartCrawlRequest struct {
	value *StartCrawlRequest
	isSet bool
}

func (v NullableStartCrawlRequest) Get() *StartCrawlRequest {
	return v.value
}

func (v *NullableStartCrawlRequest) Set(val *StartCrawlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStartCrawlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStartCrawlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartCrawlRequest(val *StartCrawlRequest) *NullableStartCrawlRequest {
	return &NullableStartCrawlRequest{value: val, isSet: true}
}

func (v NullableStartCrawlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartCrawlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


