/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Crawl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Crawl{}

// Crawl struct for Crawl
type Crawl struct {
	// Unique crawl identifier
	Id string `json:"id"`
	// Project identifier
	ProjectId string `json:"projectId"`
	// Crawl status
	Status string `json:"status"`
	// Crawl start timestamp
	StartedAt time.Time `json:"startedAt"`
	// Crawl completion timestamp
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// Number of pages crawled
	PagesCrawled *int32 `json:"pagesCrawled,omitempty"`
	// Error message if crawl failed
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

type _Crawl Crawl

// NewCrawl instantiates a new Crawl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrawl(id string, projectId string, status string, startedAt time.Time) *Crawl {
	this := Crawl{}
	this.Id = id
	this.ProjectId = projectId
	this.Status = status
	this.StartedAt = startedAt
	return &this
}

// NewCrawlWithDefaults instantiates a new Crawl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrawlWithDefaults() *Crawl {
	this := Crawl{}
	return &this
}

// GetId returns the Id field value
func (o *Crawl) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Crawl) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Crawl) SetId(v string) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value
func (o *Crawl) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Crawl) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Crawl) SetProjectId(v string) {
	o.ProjectId = v
}

// GetStatus returns the Status field value
func (o *Crawl) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Crawl) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Crawl) SetStatus(v string) {
	o.Status = v
}

// GetStartedAt returns the StartedAt field value
func (o *Crawl) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *Crawl) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *Crawl) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Crawl) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Crawl) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Crawl) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *Crawl) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetPagesCrawled returns the PagesCrawled field value if set, zero value otherwise.
func (o *Crawl) GetPagesCrawled() int32 {
	if o == nil || IsNil(o.PagesCrawled) {
		var ret int32
		return ret
	}
	return *o.PagesCrawled
}

// GetPagesCrawledOk returns a tuple with the PagesCrawled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Crawl) GetPagesCrawledOk() (*int32, bool) {
	if o == nil || IsNil(o.PagesCrawled) {
		return nil, false
	}
	return o.PagesCrawled, true
}

// HasPagesCrawled returns a boolean if a field has been set.
func (o *Crawl) HasPagesCrawled() bool {
	if o != nil && !IsNil(o.PagesCrawled) {
		return true
	}

	return false
}

// SetPagesCrawled gets a reference to the given int32 and assigns it to the PagesCrawled field.
func (o *Crawl) SetPagesCrawled(v int32) {
	o.PagesCrawled = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *Crawl) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Crawl) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *Crawl) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *Crawl) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o Crawl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Crawl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["projectId"] = o.ProjectId
	toSerialize["status"] = o.Status
	toSerialize["startedAt"] = o.StartedAt
	if !IsNil(o.CompletedAt) {
		toSerialize["completedAt"] = o.CompletedAt
	}
	if !IsNil(o.PagesCrawled) {
		toSerialize["pagesCrawled"] = o.PagesCrawled
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

func (o *Crawl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"projectId",
		"status",
		"startedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCrawl := _Crawl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCrawl)

	if err != nil {
		return err
	}

	*o = Crawl(varCrawl)

	return err
}

type NullableCrawl struct {
	value *Crawl
	isSet bool
}

func (v NullableCrawl) Get() *Crawl {
	return v.value
}

func (v *NullableCrawl) Set(val *Crawl) {
	v.value = val
	v.isSet = true
}

func (v NullableCrawl) IsSet() bool {
	return v.isSet
}

func (v *NullableCrawl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrawl(val *Crawl) *NullableCrawl {
	return &NullableCrawl{value: val, isSet: true}
}

func (v NullableCrawl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrawl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


