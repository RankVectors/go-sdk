/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ChangeResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeResult{}

// ChangeResult struct for ChangeResult
type ChangeResult struct {
	// URL of the page
	PageUrl string `json:"pageUrl"`
	// Change status
	ChangeStatus string `json:"changeStatus"`
	// Page visibility
	Visibility string `json:"visibility"`
	// Previous scrape timestamp
	PreviousScrapeAt *time.Time `json:"previousScrapeAt,omitempty"`
}

type _ChangeResult ChangeResult

// NewChangeResult instantiates a new ChangeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeResult(pageUrl string, changeStatus string, visibility string) *ChangeResult {
	this := ChangeResult{}
	this.PageUrl = pageUrl
	this.ChangeStatus = changeStatus
	this.Visibility = visibility
	return &this
}

// NewChangeResultWithDefaults instantiates a new ChangeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeResultWithDefaults() *ChangeResult {
	this := ChangeResult{}
	return &this
}

// GetPageUrl returns the PageUrl field value
func (o *ChangeResult) GetPageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PageUrl
}

// GetPageUrlOk returns a tuple with the PageUrl field value
// and a boolean to check if the value has been set.
func (o *ChangeResult) GetPageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageUrl, true
}

// SetPageUrl sets field value
func (o *ChangeResult) SetPageUrl(v string) {
	o.PageUrl = v
}

// GetChangeStatus returns the ChangeStatus field value
func (o *ChangeResult) GetChangeStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangeStatus
}

// GetChangeStatusOk returns a tuple with the ChangeStatus field value
// and a boolean to check if the value has been set.
func (o *ChangeResult) GetChangeStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeStatus, true
}

// SetChangeStatus sets field value
func (o *ChangeResult) SetChangeStatus(v string) {
	o.ChangeStatus = v
}

// GetVisibility returns the Visibility field value
func (o *ChangeResult) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *ChangeResult) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *ChangeResult) SetVisibility(v string) {
	o.Visibility = v
}

// GetPreviousScrapeAt returns the PreviousScrapeAt field value if set, zero value otherwise.
func (o *ChangeResult) GetPreviousScrapeAt() time.Time {
	if o == nil || IsNil(o.PreviousScrapeAt) {
		var ret time.Time
		return ret
	}
	return *o.PreviousScrapeAt
}

// GetPreviousScrapeAtOk returns a tuple with the PreviousScrapeAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeResult) GetPreviousScrapeAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PreviousScrapeAt) {
		return nil, false
	}
	return o.PreviousScrapeAt, true
}

// HasPreviousScrapeAt returns a boolean if a field has been set.
func (o *ChangeResult) HasPreviousScrapeAt() bool {
	if o != nil && !IsNil(o.PreviousScrapeAt) {
		return true
	}

	return false
}

// SetPreviousScrapeAt gets a reference to the given time.Time and assigns it to the PreviousScrapeAt field.
func (o *ChangeResult) SetPreviousScrapeAt(v time.Time) {
	o.PreviousScrapeAt = &v
}

func (o ChangeResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pageUrl"] = o.PageUrl
	toSerialize["changeStatus"] = o.ChangeStatus
	toSerialize["visibility"] = o.Visibility
	if !IsNil(o.PreviousScrapeAt) {
		toSerialize["previousScrapeAt"] = o.PreviousScrapeAt
	}
	return toSerialize, nil
}

func (o *ChangeResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pageUrl",
		"changeStatus",
		"visibility",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeResult := _ChangeResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChangeResult)

	if err != nil {
		return err
	}

	*o = ChangeResult(varChangeResult)

	return err
}

type NullableChangeResult struct {
	value *ChangeResult
	isSet bool
}

func (v NullableChangeResult) Get() *ChangeResult {
	return v.value
}

func (v *NullableChangeResult) Set(val *ChangeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeResult(val *ChangeResult) *NullableChangeResult {
	return &NullableChangeResult{value: val, isSet: true}
}

func (v NullableChangeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


