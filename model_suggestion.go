/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Suggestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Suggestion{}

// Suggestion struct for Suggestion
type Suggestion struct {
	// Unique suggestion identifier
	Id string `json:"id"`
	// Project identifier
	ProjectId string `json:"projectId"`
	// Suggestion status
	Status string `json:"status"`
	// AI-calculated relevance score (0-1)
	RelevanceScore float32 `json:"relevanceScore"`
	// Suggested anchor text
	AnchorText string `json:"anchorText"`
	// Context where the link should be placed
	Context *string `json:"context,omitempty"`
	SourcePage PageInfo `json:"sourcePage"`
	TargetPage PageInfo `json:"targetPage"`
	// AI reasoning for the suggestion
	Reasoning *string `json:"reasoning,omitempty"`
	// Suggestion creation timestamp
	CreatedAt time.Time `json:"createdAt"`
	// Last update timestamp
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type _Suggestion Suggestion

// NewSuggestion instantiates a new Suggestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuggestion(id string, projectId string, status string, relevanceScore float32, anchorText string, sourcePage PageInfo, targetPage PageInfo, createdAt time.Time) *Suggestion {
	this := Suggestion{}
	this.Id = id
	this.ProjectId = projectId
	this.Status = status
	this.RelevanceScore = relevanceScore
	this.AnchorText = anchorText
	this.SourcePage = sourcePage
	this.TargetPage = targetPage
	this.CreatedAt = createdAt
	return &this
}

// NewSuggestionWithDefaults instantiates a new Suggestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuggestionWithDefaults() *Suggestion {
	this := Suggestion{}
	return &this
}

// GetId returns the Id field value
func (o *Suggestion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Suggestion) SetId(v string) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value
func (o *Suggestion) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *Suggestion) SetProjectId(v string) {
	o.ProjectId = v
}

// GetStatus returns the Status field value
func (o *Suggestion) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Suggestion) SetStatus(v string) {
	o.Status = v
}

// GetRelevanceScore returns the RelevanceScore field value
func (o *Suggestion) GetRelevanceScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RelevanceScore
}

// GetRelevanceScoreOk returns a tuple with the RelevanceScore field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetRelevanceScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelevanceScore, true
}

// SetRelevanceScore sets field value
func (o *Suggestion) SetRelevanceScore(v float32) {
	o.RelevanceScore = v
}

// GetAnchorText returns the AnchorText field value
func (o *Suggestion) GetAnchorText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnchorText
}

// GetAnchorTextOk returns a tuple with the AnchorText field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetAnchorTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnchorText, true
}

// SetAnchorText sets field value
func (o *Suggestion) SetAnchorText(v string) {
	o.AnchorText = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Suggestion) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Suggestion) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *Suggestion) SetContext(v string) {
	o.Context = &v
}

// GetSourcePage returns the SourcePage field value
func (o *Suggestion) GetSourcePage() PageInfo {
	if o == nil {
		var ret PageInfo
		return ret
	}

	return o.SourcePage
}

// GetSourcePageOk returns a tuple with the SourcePage field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetSourcePageOk() (*PageInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourcePage, true
}

// SetSourcePage sets field value
func (o *Suggestion) SetSourcePage(v PageInfo) {
	o.SourcePage = v
}

// GetTargetPage returns the TargetPage field value
func (o *Suggestion) GetTargetPage() PageInfo {
	if o == nil {
		var ret PageInfo
		return ret
	}

	return o.TargetPage
}

// GetTargetPageOk returns a tuple with the TargetPage field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetTargetPageOk() (*PageInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetPage, true
}

// SetTargetPage sets field value
func (o *Suggestion) SetTargetPage(v PageInfo) {
	o.TargetPage = v
}

// GetReasoning returns the Reasoning field value if set, zero value otherwise.
func (o *Suggestion) GetReasoning() string {
	if o == nil || IsNil(o.Reasoning) {
		var ret string
		return ret
	}
	return *o.Reasoning
}

// GetReasoningOk returns a tuple with the Reasoning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetReasoningOk() (*string, bool) {
	if o == nil || IsNil(o.Reasoning) {
		return nil, false
	}
	return o.Reasoning, true
}

// HasReasoning returns a boolean if a field has been set.
func (o *Suggestion) HasReasoning() bool {
	if o != nil && !IsNil(o.Reasoning) {
		return true
	}

	return false
}

// SetReasoning gets a reference to the given string and assigns it to the Reasoning field.
func (o *Suggestion) SetReasoning(v string) {
	o.Reasoning = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Suggestion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Suggestion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Suggestion) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Suggestion) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Suggestion) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Suggestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Suggestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["projectId"] = o.ProjectId
	toSerialize["status"] = o.Status
	toSerialize["relevanceScore"] = o.RelevanceScore
	toSerialize["anchorText"] = o.AnchorText
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	toSerialize["sourcePage"] = o.SourcePage
	toSerialize["targetPage"] = o.TargetPage
	if !IsNil(o.Reasoning) {
		toSerialize["reasoning"] = o.Reasoning
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *Suggestion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"projectId",
		"status",
		"relevanceScore",
		"anchorText",
		"sourcePage",
		"targetPage",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSuggestion := _Suggestion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSuggestion)

	if err != nil {
		return err
	}

	*o = Suggestion(varSuggestion)

	return err
}

type NullableSuggestion struct {
	value *Suggestion
	isSet bool
}

func (v NullableSuggestion) Get() *Suggestion {
	return v.value
}

func (v *NullableSuggestion) Set(val *Suggestion) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestion) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestion(val *Suggestion) *NullableSuggestion {
	return &NullableSuggestion{value: val, isSet: true}
}

func (v NullableSuggestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


