/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
)

// checks if the GetImplementation200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetImplementation200Response{}

// GetImplementation200Response struct for GetImplementation200Response
type GetImplementation200Response struct {
	Success *bool `json:"success,omitempty"`
	Implementation *Implementation `json:"implementation,omitempty"`
}

// NewGetImplementation200Response instantiates a new GetImplementation200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetImplementation200Response() *GetImplementation200Response {
	this := GetImplementation200Response{}
	return &this
}

// NewGetImplementation200ResponseWithDefaults instantiates a new GetImplementation200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetImplementation200ResponseWithDefaults() *GetImplementation200Response {
	this := GetImplementation200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *GetImplementation200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetImplementation200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *GetImplementation200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *GetImplementation200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetImplementation returns the Implementation field value if set, zero value otherwise.
func (o *GetImplementation200Response) GetImplementation() Implementation {
	if o == nil || IsNil(o.Implementation) {
		var ret Implementation
		return ret
	}
	return *o.Implementation
}

// GetImplementationOk returns a tuple with the Implementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetImplementation200Response) GetImplementationOk() (*Implementation, bool) {
	if o == nil || IsNil(o.Implementation) {
		return nil, false
	}
	return o.Implementation, true
}

// HasImplementation returns a boolean if a field has been set.
func (o *GetImplementation200Response) HasImplementation() bool {
	if o != nil && !IsNil(o.Implementation) {
		return true
	}

	return false
}

// SetImplementation gets a reference to the given Implementation and assigns it to the Implementation field.
func (o *GetImplementation200Response) SetImplementation(v Implementation) {
	o.Implementation = &v
}

func (o GetImplementation200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetImplementation200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Implementation) {
		toSerialize["implementation"] = o.Implementation
	}
	return toSerialize, nil
}

type NullableGetImplementation200Response struct {
	value *GetImplementation200Response
	isSet bool
}

func (v NullableGetImplementation200Response) Get() *GetImplementation200Response {
	return v.value
}

func (v *NullableGetImplementation200Response) Set(val *GetImplementation200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetImplementation200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetImplementation200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetImplementation200Response(val *GetImplementation200Response) *NullableGetImplementation200Response {
	return &NullableGetImplementation200Response{value: val, isSet: true}
}

func (v NullableGetImplementation200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetImplementation200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


