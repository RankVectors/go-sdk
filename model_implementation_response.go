/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImplementationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImplementationResponse{}

// ImplementationResponse struct for ImplementationResponse
type ImplementationResponse struct {
	// Whether any implementations succeeded
	Success bool `json:"success"`
	// Individual implementation results
	Results []ImplementationResult `json:"results"`
	Summary ImplementationSummary `json:"summary"`
}

type _ImplementationResponse ImplementationResponse

// NewImplementationResponse instantiates a new ImplementationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementationResponse(success bool, results []ImplementationResult, summary ImplementationSummary) *ImplementationResponse {
	this := ImplementationResponse{}
	this.Success = success
	this.Results = results
	this.Summary = summary
	return &this
}

// NewImplementationResponseWithDefaults instantiates a new ImplementationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationResponseWithDefaults() *ImplementationResponse {
	this := ImplementationResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *ImplementationResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ImplementationResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ImplementationResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetResults returns the Results field value
func (o *ImplementationResponse) GetResults() []ImplementationResult {
	if o == nil {
		var ret []ImplementationResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ImplementationResponse) GetResultsOk() ([]ImplementationResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ImplementationResponse) SetResults(v []ImplementationResult) {
	o.Results = v
}

// GetSummary returns the Summary field value
func (o *ImplementationResponse) GetSummary() ImplementationSummary {
	if o == nil {
		var ret ImplementationSummary
		return ret
	}

	return o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value
// and a boolean to check if the value has been set.
func (o *ImplementationResponse) GetSummaryOk() (*ImplementationSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Summary, true
}

// SetSummary sets field value
func (o *ImplementationResponse) SetSummary(v ImplementationSummary) {
	o.Summary = v
}

func (o ImplementationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImplementationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["results"] = o.Results
	toSerialize["summary"] = o.Summary
	return toSerialize, nil
}

func (o *ImplementationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"results",
		"summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImplementationResponse := _ImplementationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImplementationResponse)

	if err != nil {
		return err
	}

	*o = ImplementationResponse(varImplementationResponse)

	return err
}

type NullableImplementationResponse struct {
	value *ImplementationResponse
	isSet bool
}

func (v NullableImplementationResponse) Get() *ImplementationResponse {
	return v.value
}

func (v *NullableImplementationResponse) Set(val *ImplementationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementationResponse(val *ImplementationResponse) *NullableImplementationResponse {
	return &NullableImplementationResponse{value: val, isSet: true}
}

func (v NullableImplementationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


