/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PeriodCharges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeriodCharges{}

// PeriodCharges struct for PeriodCharges
type PeriodCharges struct {
	// Period start date
	StartDate time.Time `json:"startDate"`
	// Period end date
	EndDate time.Time `json:"endDate"`
	// Total charges for the period
	TotalCharges float32 `json:"totalCharges"`
}

type _PeriodCharges PeriodCharges

// NewPeriodCharges instantiates a new PeriodCharges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodCharges(startDate time.Time, endDate time.Time, totalCharges float32) *PeriodCharges {
	this := PeriodCharges{}
	this.StartDate = startDate
	this.EndDate = endDate
	this.TotalCharges = totalCharges
	return &this
}

// NewPeriodChargesWithDefaults instantiates a new PeriodCharges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodChargesWithDefaults() *PeriodCharges {
	this := PeriodCharges{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *PeriodCharges) GetStartDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *PeriodCharges) GetStartDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *PeriodCharges) SetStartDate(v time.Time) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *PeriodCharges) GetEndDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *PeriodCharges) GetEndDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *PeriodCharges) SetEndDate(v time.Time) {
	o.EndDate = v
}

// GetTotalCharges returns the TotalCharges field value
func (o *PeriodCharges) GetTotalCharges() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalCharges
}

// GetTotalChargesOk returns a tuple with the TotalCharges field value
// and a boolean to check if the value has been set.
func (o *PeriodCharges) GetTotalChargesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCharges, true
}

// SetTotalCharges sets field value
func (o *PeriodCharges) SetTotalCharges(v float32) {
	o.TotalCharges = v
}

func (o PeriodCharges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeriodCharges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate
	toSerialize["totalCharges"] = o.TotalCharges
	return toSerialize, nil
}

func (o *PeriodCharges) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startDate",
		"endDate",
		"totalCharges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPeriodCharges := _PeriodCharges{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPeriodCharges)

	if err != nil {
		return err
	}

	*o = PeriodCharges(varPeriodCharges)

	return err
}

type NullablePeriodCharges struct {
	value *PeriodCharges
	isSet bool
}

func (v NullablePeriodCharges) Get() *PeriodCharges {
	return v.value
}

func (v *NullablePeriodCharges) Set(val *PeriodCharges) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodCharges) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodCharges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodCharges(val *PeriodCharges) *NullablePeriodCharges {
	return &NullablePeriodCharges{value: val, isSet: true}
}

func (v NullablePeriodCharges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodCharges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


