/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpendingLimitStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendingLimitStatus{}

// SpendingLimitStatus struct for SpendingLimitStatus
type SpendingLimitStatus struct {
	// Whether spending limit is enabled
	Enabled bool `json:"enabled"`
	// Spending limit
	Limit float32 `json:"limit"`
	// Amount used
	Used float32 `json:"used"`
	// Amount remaining
	Remaining float32 `json:"remaining"`
}

type _SpendingLimitStatus SpendingLimitStatus

// NewSpendingLimitStatus instantiates a new SpendingLimitStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendingLimitStatus(enabled bool, limit float32, used float32, remaining float32) *SpendingLimitStatus {
	this := SpendingLimitStatus{}
	this.Enabled = enabled
	this.Limit = limit
	this.Used = used
	this.Remaining = remaining
	return &this
}

// NewSpendingLimitStatusWithDefaults instantiates a new SpendingLimitStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendingLimitStatusWithDefaults() *SpendingLimitStatus {
	this := SpendingLimitStatus{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *SpendingLimitStatus) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SpendingLimitStatus) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SpendingLimitStatus) SetEnabled(v bool) {
	o.Enabled = v
}

// GetLimit returns the Limit field value
func (o *SpendingLimitStatus) GetLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *SpendingLimitStatus) GetLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *SpendingLimitStatus) SetLimit(v float32) {
	o.Limit = v
}

// GetUsed returns the Used field value
func (o *SpendingLimitStatus) GetUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *SpendingLimitStatus) GetUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Used, true
}

// SetUsed sets field value
func (o *SpendingLimitStatus) SetUsed(v float32) {
	o.Used = v
}

// GetRemaining returns the Remaining field value
func (o *SpendingLimitStatus) GetRemaining() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value
// and a boolean to check if the value has been set.
func (o *SpendingLimitStatus) GetRemainingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remaining, true
}

// SetRemaining sets field value
func (o *SpendingLimitStatus) SetRemaining(v float32) {
	o.Remaining = v
}

func (o SpendingLimitStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendingLimitStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["limit"] = o.Limit
	toSerialize["used"] = o.Used
	toSerialize["remaining"] = o.Remaining
	return toSerialize, nil
}

func (o *SpendingLimitStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"limit",
		"used",
		"remaining",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpendingLimitStatus := _SpendingLimitStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpendingLimitStatus)

	if err != nil {
		return err
	}

	*o = SpendingLimitStatus(varSpendingLimitStatus)

	return err
}

type NullableSpendingLimitStatus struct {
	value *SpendingLimitStatus
	isSet bool
}

func (v NullableSpendingLimitStatus) Get() *SpendingLimitStatus {
	return v.value
}

func (v *NullableSpendingLimitStatus) Set(val *SpendingLimitStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendingLimitStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendingLimitStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendingLimitStatus(val *SpendingLimitStatus) *NullableSpendingLimitStatus {
	return &NullableSpendingLimitStatus{value: val, isSet: true}
}

func (v NullableSpendingLimitStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendingLimitStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


