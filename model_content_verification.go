/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentVerification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentVerification{}

// ContentVerification struct for ContentVerification
type ContentVerification struct {
	// Whether it's safe to implement the link
	Safe bool `json:"safe"`
	// Reason for the verification result
	Reason string `json:"reason"`
	ChangeResult *ChangeResult `json:"changeResult,omitempty"`
}

type _ContentVerification ContentVerification

// NewContentVerification instantiates a new ContentVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentVerification(safe bool, reason string) *ContentVerification {
	this := ContentVerification{}
	this.Safe = safe
	this.Reason = reason
	return &this
}

// NewContentVerificationWithDefaults instantiates a new ContentVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentVerificationWithDefaults() *ContentVerification {
	this := ContentVerification{}
	return &this
}

// GetSafe returns the Safe field value
func (o *ContentVerification) GetSafe() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Safe
}

// GetSafeOk returns a tuple with the Safe field value
// and a boolean to check if the value has been set.
func (o *ContentVerification) GetSafeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Safe, true
}

// SetSafe sets field value
func (o *ContentVerification) SetSafe(v bool) {
	o.Safe = v
}

// GetReason returns the Reason field value
func (o *ContentVerification) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ContentVerification) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ContentVerification) SetReason(v string) {
	o.Reason = v
}

// GetChangeResult returns the ChangeResult field value if set, zero value otherwise.
func (o *ContentVerification) GetChangeResult() ChangeResult {
	if o == nil || IsNil(o.ChangeResult) {
		var ret ChangeResult
		return ret
	}
	return *o.ChangeResult
}

// GetChangeResultOk returns a tuple with the ChangeResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentVerification) GetChangeResultOk() (*ChangeResult, bool) {
	if o == nil || IsNil(o.ChangeResult) {
		return nil, false
	}
	return o.ChangeResult, true
}

// HasChangeResult returns a boolean if a field has been set.
func (o *ContentVerification) HasChangeResult() bool {
	if o != nil && !IsNil(o.ChangeResult) {
		return true
	}

	return false
}

// SetChangeResult gets a reference to the given ChangeResult and assigns it to the ChangeResult field.
func (o *ContentVerification) SetChangeResult(v ChangeResult) {
	o.ChangeResult = &v
}

func (o ContentVerification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentVerification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["safe"] = o.Safe
	toSerialize["reason"] = o.Reason
	if !IsNil(o.ChangeResult) {
		toSerialize["changeResult"] = o.ChangeResult
	}
	return toSerialize, nil
}

func (o *ContentVerification) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"safe",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentVerification := _ContentVerification{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentVerification)

	if err != nil {
		return err
	}

	*o = ContentVerification(varContentVerification)

	return err
}

type NullableContentVerification struct {
	value *ContentVerification
	isSet bool
}

func (v NullableContentVerification) Get() *ContentVerification {
	return v.value
}

func (v *NullableContentVerification) Set(val *ContentVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableContentVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableContentVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentVerification(val *ContentVerification) *NullableContentVerification {
	return &NullableContentVerification{value: val, isSet: true}
}

func (v NullableContentVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


