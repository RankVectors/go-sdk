/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateProjectRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectRequest{}

// CreateProjectRequest struct for CreateProjectRequest
type CreateProjectRequest struct {
	// Project name
	Name string `json:"name"`
	// Website domain URL
	Domain string `json:"domain"`
	// Natural language prompt for crawling
	Prompt *string `json:"prompt,omitempty"`
	// Search query for targeted crawling
	SearchQuery *string `json:"searchQuery,omitempty"`
	// How to handle sitemaps
	SitemapMode *string `json:"sitemapMode,omitempty"`
	// Whether to include subdomains
	IncludeSubdomains *bool `json:"includeSubdomains,omitempty"`
	// Whether to ignore URL query parameters
	IgnoreQueryParams *bool `json:"ignoreQueryParams,omitempty"`
	// Maximum crawl depth
	MaxDiscoveryDepth *int32 `json:"maxDiscoveryDepth,omitempty"`
	// Paths to exclude from crawling
	ExcludePaths []string `json:"excludePaths,omitempty"`
	// Specific paths to include
	IncludePaths []string `json:"includePaths,omitempty"`
	// Whether to crawl the entire domain
	CrawlEntireDomain *bool `json:"crawlEntireDomain,omitempty"`
	// Whether to allow external links
	AllowExternalLinks *bool `json:"allowExternalLinks,omitempty"`
	// Maximum number of pages to crawl
	MaxPages *int32 `json:"maxPages,omitempty"`
	// Delay between crawl requests (ms)
	CrawlDelay *int32 `json:"crawlDelay,omitempty"`
	// Maximum concurrent crawl requests
	CrawlMaxConcurrency *int32 `json:"crawlMaxConcurrency,omitempty"`
	// Whether to extract only main content
	OnlyMainContent *bool `json:"onlyMainContent,omitempty"`
	// Custom headers for crawling
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`
	// Wait time for page load (ms)
	WaitFor *int32 `json:"waitFor,omitempty"`
	// Whether to block ads
	BlockAds *bool `json:"blockAds,omitempty"`
	// Proxy mode for crawling
	ProxyMode *string `json:"proxyMode,omitempty"`
	// Whether to use AI reranking
	UseReranking *bool `json:"useReranking,omitempty"`
	// Whether to enable change tracking
	EnableChangeTracking *bool `json:"enableChangeTracking,omitempty"`
}

type _CreateProjectRequest CreateProjectRequest

// NewCreateProjectRequest instantiates a new CreateProjectRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectRequest(name string, domain string) *CreateProjectRequest {
	this := CreateProjectRequest{}
	this.Name = name
	this.Domain = domain
	var sitemapMode string = "include"
	this.SitemapMode = &sitemapMode
	var includeSubdomains bool = true
	this.IncludeSubdomains = &includeSubdomains
	var ignoreQueryParams bool = true
	this.IgnoreQueryParams = &ignoreQueryParams
	var crawlEntireDomain bool = false
	this.CrawlEntireDomain = &crawlEntireDomain
	var allowExternalLinks bool = false
	this.AllowExternalLinks = &allowExternalLinks
	var maxPages int32 = 100
	this.MaxPages = &maxPages
	var onlyMainContent bool = true
	this.OnlyMainContent = &onlyMainContent
	var waitFor int32 = 0
	this.WaitFor = &waitFor
	var blockAds bool = true
	this.BlockAds = &blockAds
	var proxyMode string = "auto"
	this.ProxyMode = &proxyMode
	var useReranking bool = true
	this.UseReranking = &useReranking
	var enableChangeTracking bool = false
	this.EnableChangeTracking = &enableChangeTracking
	return &this
}

// NewCreateProjectRequestWithDefaults instantiates a new CreateProjectRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectRequestWithDefaults() *CreateProjectRequest {
	this := CreateProjectRequest{}
	var sitemapMode string = "include"
	this.SitemapMode = &sitemapMode
	var includeSubdomains bool = true
	this.IncludeSubdomains = &includeSubdomains
	var ignoreQueryParams bool = true
	this.IgnoreQueryParams = &ignoreQueryParams
	var crawlEntireDomain bool = false
	this.CrawlEntireDomain = &crawlEntireDomain
	var allowExternalLinks bool = false
	this.AllowExternalLinks = &allowExternalLinks
	var maxPages int32 = 100
	this.MaxPages = &maxPages
	var onlyMainContent bool = true
	this.OnlyMainContent = &onlyMainContent
	var waitFor int32 = 0
	this.WaitFor = &waitFor
	var blockAds bool = true
	this.BlockAds = &blockAds
	var proxyMode string = "auto"
	this.ProxyMode = &proxyMode
	var useReranking bool = true
	this.UseReranking = &useReranking
	var enableChangeTracking bool = false
	this.EnableChangeTracking = &enableChangeTracking
	return &this
}

// GetName returns the Name field value
func (o *CreateProjectRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateProjectRequest) SetName(v string) {
	o.Name = v
}

// GetDomain returns the Domain field value
func (o *CreateProjectRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CreateProjectRequest) SetDomain(v string) {
	o.Domain = v
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetPrompt() string {
	if o == nil || IsNil(o.Prompt) {
		var ret string
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetPromptOk() (*string, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given string and assigns it to the Prompt field.
func (o *CreateProjectRequest) SetPrompt(v string) {
	o.Prompt = &v
}

// GetSearchQuery returns the SearchQuery field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetSearchQuery() string {
	if o == nil || IsNil(o.SearchQuery) {
		var ret string
		return ret
	}
	return *o.SearchQuery
}

// GetSearchQueryOk returns a tuple with the SearchQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetSearchQueryOk() (*string, bool) {
	if o == nil || IsNil(o.SearchQuery) {
		return nil, false
	}
	return o.SearchQuery, true
}

// HasSearchQuery returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasSearchQuery() bool {
	if o != nil && !IsNil(o.SearchQuery) {
		return true
	}

	return false
}

// SetSearchQuery gets a reference to the given string and assigns it to the SearchQuery field.
func (o *CreateProjectRequest) SetSearchQuery(v string) {
	o.SearchQuery = &v
}

// GetSitemapMode returns the SitemapMode field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetSitemapMode() string {
	if o == nil || IsNil(o.SitemapMode) {
		var ret string
		return ret
	}
	return *o.SitemapMode
}

// GetSitemapModeOk returns a tuple with the SitemapMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetSitemapModeOk() (*string, bool) {
	if o == nil || IsNil(o.SitemapMode) {
		return nil, false
	}
	return o.SitemapMode, true
}

// HasSitemapMode returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasSitemapMode() bool {
	if o != nil && !IsNil(o.SitemapMode) {
		return true
	}

	return false
}

// SetSitemapMode gets a reference to the given string and assigns it to the SitemapMode field.
func (o *CreateProjectRequest) SetSitemapMode(v string) {
	o.SitemapMode = &v
}

// GetIncludeSubdomains returns the IncludeSubdomains field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetIncludeSubdomains() bool {
	if o == nil || IsNil(o.IncludeSubdomains) {
		var ret bool
		return ret
	}
	return *o.IncludeSubdomains
}

// GetIncludeSubdomainsOk returns a tuple with the IncludeSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetIncludeSubdomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeSubdomains) {
		return nil, false
	}
	return o.IncludeSubdomains, true
}

// HasIncludeSubdomains returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasIncludeSubdomains() bool {
	if o != nil && !IsNil(o.IncludeSubdomains) {
		return true
	}

	return false
}

// SetIncludeSubdomains gets a reference to the given bool and assigns it to the IncludeSubdomains field.
func (o *CreateProjectRequest) SetIncludeSubdomains(v bool) {
	o.IncludeSubdomains = &v
}

// GetIgnoreQueryParams returns the IgnoreQueryParams field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetIgnoreQueryParams() bool {
	if o == nil || IsNil(o.IgnoreQueryParams) {
		var ret bool
		return ret
	}
	return *o.IgnoreQueryParams
}

// GetIgnoreQueryParamsOk returns a tuple with the IgnoreQueryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetIgnoreQueryParamsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreQueryParams) {
		return nil, false
	}
	return o.IgnoreQueryParams, true
}

// HasIgnoreQueryParams returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasIgnoreQueryParams() bool {
	if o != nil && !IsNil(o.IgnoreQueryParams) {
		return true
	}

	return false
}

// SetIgnoreQueryParams gets a reference to the given bool and assigns it to the IgnoreQueryParams field.
func (o *CreateProjectRequest) SetIgnoreQueryParams(v bool) {
	o.IgnoreQueryParams = &v
}

// GetMaxDiscoveryDepth returns the MaxDiscoveryDepth field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetMaxDiscoveryDepth() int32 {
	if o == nil || IsNil(o.MaxDiscoveryDepth) {
		var ret int32
		return ret
	}
	return *o.MaxDiscoveryDepth
}

// GetMaxDiscoveryDepthOk returns a tuple with the MaxDiscoveryDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetMaxDiscoveryDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDiscoveryDepth) {
		return nil, false
	}
	return o.MaxDiscoveryDepth, true
}

// HasMaxDiscoveryDepth returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasMaxDiscoveryDepth() bool {
	if o != nil && !IsNil(o.MaxDiscoveryDepth) {
		return true
	}

	return false
}

// SetMaxDiscoveryDepth gets a reference to the given int32 and assigns it to the MaxDiscoveryDepth field.
func (o *CreateProjectRequest) SetMaxDiscoveryDepth(v int32) {
	o.MaxDiscoveryDepth = &v
}

// GetExcludePaths returns the ExcludePaths field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetExcludePaths() []string {
	if o == nil || IsNil(o.ExcludePaths) {
		var ret []string
		return ret
	}
	return o.ExcludePaths
}

// GetExcludePathsOk returns a tuple with the ExcludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetExcludePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludePaths) {
		return nil, false
	}
	return o.ExcludePaths, true
}

// HasExcludePaths returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasExcludePaths() bool {
	if o != nil && !IsNil(o.ExcludePaths) {
		return true
	}

	return false
}

// SetExcludePaths gets a reference to the given []string and assigns it to the ExcludePaths field.
func (o *CreateProjectRequest) SetExcludePaths(v []string) {
	o.ExcludePaths = v
}

// GetIncludePaths returns the IncludePaths field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetIncludePaths() []string {
	if o == nil || IsNil(o.IncludePaths) {
		var ret []string
		return ret
	}
	return o.IncludePaths
}

// GetIncludePathsOk returns a tuple with the IncludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetIncludePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludePaths) {
		return nil, false
	}
	return o.IncludePaths, true
}

// HasIncludePaths returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasIncludePaths() bool {
	if o != nil && !IsNil(o.IncludePaths) {
		return true
	}

	return false
}

// SetIncludePaths gets a reference to the given []string and assigns it to the IncludePaths field.
func (o *CreateProjectRequest) SetIncludePaths(v []string) {
	o.IncludePaths = v
}

// GetCrawlEntireDomain returns the CrawlEntireDomain field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetCrawlEntireDomain() bool {
	if o == nil || IsNil(o.CrawlEntireDomain) {
		var ret bool
		return ret
	}
	return *o.CrawlEntireDomain
}

// GetCrawlEntireDomainOk returns a tuple with the CrawlEntireDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetCrawlEntireDomainOk() (*bool, bool) {
	if o == nil || IsNil(o.CrawlEntireDomain) {
		return nil, false
	}
	return o.CrawlEntireDomain, true
}

// HasCrawlEntireDomain returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasCrawlEntireDomain() bool {
	if o != nil && !IsNil(o.CrawlEntireDomain) {
		return true
	}

	return false
}

// SetCrawlEntireDomain gets a reference to the given bool and assigns it to the CrawlEntireDomain field.
func (o *CreateProjectRequest) SetCrawlEntireDomain(v bool) {
	o.CrawlEntireDomain = &v
}

// GetAllowExternalLinks returns the AllowExternalLinks field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetAllowExternalLinks() bool {
	if o == nil || IsNil(o.AllowExternalLinks) {
		var ret bool
		return ret
	}
	return *o.AllowExternalLinks
}

// GetAllowExternalLinksOk returns a tuple with the AllowExternalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetAllowExternalLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowExternalLinks) {
		return nil, false
	}
	return o.AllowExternalLinks, true
}

// HasAllowExternalLinks returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasAllowExternalLinks() bool {
	if o != nil && !IsNil(o.AllowExternalLinks) {
		return true
	}

	return false
}

// SetAllowExternalLinks gets a reference to the given bool and assigns it to the AllowExternalLinks field.
func (o *CreateProjectRequest) SetAllowExternalLinks(v bool) {
	o.AllowExternalLinks = &v
}

// GetMaxPages returns the MaxPages field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetMaxPages() int32 {
	if o == nil || IsNil(o.MaxPages) {
		var ret int32
		return ret
	}
	return *o.MaxPages
}

// GetMaxPagesOk returns a tuple with the MaxPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetMaxPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPages) {
		return nil, false
	}
	return o.MaxPages, true
}

// HasMaxPages returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasMaxPages() bool {
	if o != nil && !IsNil(o.MaxPages) {
		return true
	}

	return false
}

// SetMaxPages gets a reference to the given int32 and assigns it to the MaxPages field.
func (o *CreateProjectRequest) SetMaxPages(v int32) {
	o.MaxPages = &v
}

// GetCrawlDelay returns the CrawlDelay field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetCrawlDelay() int32 {
	if o == nil || IsNil(o.CrawlDelay) {
		var ret int32
		return ret
	}
	return *o.CrawlDelay
}

// GetCrawlDelayOk returns a tuple with the CrawlDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetCrawlDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.CrawlDelay) {
		return nil, false
	}
	return o.CrawlDelay, true
}

// HasCrawlDelay returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasCrawlDelay() bool {
	if o != nil && !IsNil(o.CrawlDelay) {
		return true
	}

	return false
}

// SetCrawlDelay gets a reference to the given int32 and assigns it to the CrawlDelay field.
func (o *CreateProjectRequest) SetCrawlDelay(v int32) {
	o.CrawlDelay = &v
}

// GetCrawlMaxConcurrency returns the CrawlMaxConcurrency field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetCrawlMaxConcurrency() int32 {
	if o == nil || IsNil(o.CrawlMaxConcurrency) {
		var ret int32
		return ret
	}
	return *o.CrawlMaxConcurrency
}

// GetCrawlMaxConcurrencyOk returns a tuple with the CrawlMaxConcurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetCrawlMaxConcurrencyOk() (*int32, bool) {
	if o == nil || IsNil(o.CrawlMaxConcurrency) {
		return nil, false
	}
	return o.CrawlMaxConcurrency, true
}

// HasCrawlMaxConcurrency returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasCrawlMaxConcurrency() bool {
	if o != nil && !IsNil(o.CrawlMaxConcurrency) {
		return true
	}

	return false
}

// SetCrawlMaxConcurrency gets a reference to the given int32 and assigns it to the CrawlMaxConcurrency field.
func (o *CreateProjectRequest) SetCrawlMaxConcurrency(v int32) {
	o.CrawlMaxConcurrency = &v
}

// GetOnlyMainContent returns the OnlyMainContent field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetOnlyMainContent() bool {
	if o == nil || IsNil(o.OnlyMainContent) {
		var ret bool
		return ret
	}
	return *o.OnlyMainContent
}

// GetOnlyMainContentOk returns a tuple with the OnlyMainContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetOnlyMainContentOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyMainContent) {
		return nil, false
	}
	return o.OnlyMainContent, true
}

// HasOnlyMainContent returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasOnlyMainContent() bool {
	if o != nil && !IsNil(o.OnlyMainContent) {
		return true
	}

	return false
}

// SetOnlyMainContent gets a reference to the given bool and assigns it to the OnlyMainContent field.
func (o *CreateProjectRequest) SetOnlyMainContent(v bool) {
	o.OnlyMainContent = &v
}

// GetCustomHeaders returns the CustomHeaders field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetCustomHeaders() map[string]string {
	if o == nil || IsNil(o.CustomHeaders) {
		var ret map[string]string
		return ret
	}
	return *o.CustomHeaders
}

// GetCustomHeadersOk returns a tuple with the CustomHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetCustomHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.CustomHeaders) {
		return nil, false
	}
	return o.CustomHeaders, true
}

// HasCustomHeaders returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasCustomHeaders() bool {
	if o != nil && !IsNil(o.CustomHeaders) {
		return true
	}

	return false
}

// SetCustomHeaders gets a reference to the given map[string]string and assigns it to the CustomHeaders field.
func (o *CreateProjectRequest) SetCustomHeaders(v map[string]string) {
	o.CustomHeaders = &v
}

// GetWaitFor returns the WaitFor field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetWaitFor() int32 {
	if o == nil || IsNil(o.WaitFor) {
		var ret int32
		return ret
	}
	return *o.WaitFor
}

// GetWaitForOk returns a tuple with the WaitFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetWaitForOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitFor) {
		return nil, false
	}
	return o.WaitFor, true
}

// HasWaitFor returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasWaitFor() bool {
	if o != nil && !IsNil(o.WaitFor) {
		return true
	}

	return false
}

// SetWaitFor gets a reference to the given int32 and assigns it to the WaitFor field.
func (o *CreateProjectRequest) SetWaitFor(v int32) {
	o.WaitFor = &v
}

// GetBlockAds returns the BlockAds field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetBlockAds() bool {
	if o == nil || IsNil(o.BlockAds) {
		var ret bool
		return ret
	}
	return *o.BlockAds
}

// GetBlockAdsOk returns a tuple with the BlockAds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetBlockAdsOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockAds) {
		return nil, false
	}
	return o.BlockAds, true
}

// HasBlockAds returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasBlockAds() bool {
	if o != nil && !IsNil(o.BlockAds) {
		return true
	}

	return false
}

// SetBlockAds gets a reference to the given bool and assigns it to the BlockAds field.
func (o *CreateProjectRequest) SetBlockAds(v bool) {
	o.BlockAds = &v
}

// GetProxyMode returns the ProxyMode field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetProxyMode() string {
	if o == nil || IsNil(o.ProxyMode) {
		var ret string
		return ret
	}
	return *o.ProxyMode
}

// GetProxyModeOk returns a tuple with the ProxyMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetProxyModeOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyMode) {
		return nil, false
	}
	return o.ProxyMode, true
}

// HasProxyMode returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasProxyMode() bool {
	if o != nil && !IsNil(o.ProxyMode) {
		return true
	}

	return false
}

// SetProxyMode gets a reference to the given string and assigns it to the ProxyMode field.
func (o *CreateProjectRequest) SetProxyMode(v string) {
	o.ProxyMode = &v
}

// GetUseReranking returns the UseReranking field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetUseReranking() bool {
	if o == nil || IsNil(o.UseReranking) {
		var ret bool
		return ret
	}
	return *o.UseReranking
}

// GetUseRerankingOk returns a tuple with the UseReranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetUseRerankingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseReranking) {
		return nil, false
	}
	return o.UseReranking, true
}

// HasUseReranking returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasUseReranking() bool {
	if o != nil && !IsNil(o.UseReranking) {
		return true
	}

	return false
}

// SetUseReranking gets a reference to the given bool and assigns it to the UseReranking field.
func (o *CreateProjectRequest) SetUseReranking(v bool) {
	o.UseReranking = &v
}

// GetEnableChangeTracking returns the EnableChangeTracking field value if set, zero value otherwise.
func (o *CreateProjectRequest) GetEnableChangeTracking() bool {
	if o == nil || IsNil(o.EnableChangeTracking) {
		var ret bool
		return ret
	}
	return *o.EnableChangeTracking
}

// GetEnableChangeTrackingOk returns a tuple with the EnableChangeTracking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectRequest) GetEnableChangeTrackingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableChangeTracking) {
		return nil, false
	}
	return o.EnableChangeTracking, true
}

// HasEnableChangeTracking returns a boolean if a field has been set.
func (o *CreateProjectRequest) HasEnableChangeTracking() bool {
	if o != nil && !IsNil(o.EnableChangeTracking) {
		return true
	}

	return false
}

// SetEnableChangeTracking gets a reference to the given bool and assigns it to the EnableChangeTracking field.
func (o *CreateProjectRequest) SetEnableChangeTracking(v bool) {
	o.EnableChangeTracking = &v
}

func (o CreateProjectRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["domain"] = o.Domain
	if !IsNil(o.Prompt) {
		toSerialize["prompt"] = o.Prompt
	}
	if !IsNil(o.SearchQuery) {
		toSerialize["searchQuery"] = o.SearchQuery
	}
	if !IsNil(o.SitemapMode) {
		toSerialize["sitemapMode"] = o.SitemapMode
	}
	if !IsNil(o.IncludeSubdomains) {
		toSerialize["includeSubdomains"] = o.IncludeSubdomains
	}
	if !IsNil(o.IgnoreQueryParams) {
		toSerialize["ignoreQueryParams"] = o.IgnoreQueryParams
	}
	if !IsNil(o.MaxDiscoveryDepth) {
		toSerialize["maxDiscoveryDepth"] = o.MaxDiscoveryDepth
	}
	if !IsNil(o.ExcludePaths) {
		toSerialize["excludePaths"] = o.ExcludePaths
	}
	if !IsNil(o.IncludePaths) {
		toSerialize["includePaths"] = o.IncludePaths
	}
	if !IsNil(o.CrawlEntireDomain) {
		toSerialize["crawlEntireDomain"] = o.CrawlEntireDomain
	}
	if !IsNil(o.AllowExternalLinks) {
		toSerialize["allowExternalLinks"] = o.AllowExternalLinks
	}
	if !IsNil(o.MaxPages) {
		toSerialize["maxPages"] = o.MaxPages
	}
	if !IsNil(o.CrawlDelay) {
		toSerialize["crawlDelay"] = o.CrawlDelay
	}
	if !IsNil(o.CrawlMaxConcurrency) {
		toSerialize["crawlMaxConcurrency"] = o.CrawlMaxConcurrency
	}
	if !IsNil(o.OnlyMainContent) {
		toSerialize["onlyMainContent"] = o.OnlyMainContent
	}
	if !IsNil(o.CustomHeaders) {
		toSerialize["customHeaders"] = o.CustomHeaders
	}
	if !IsNil(o.WaitFor) {
		toSerialize["waitFor"] = o.WaitFor
	}
	if !IsNil(o.BlockAds) {
		toSerialize["blockAds"] = o.BlockAds
	}
	if !IsNil(o.ProxyMode) {
		toSerialize["proxyMode"] = o.ProxyMode
	}
	if !IsNil(o.UseReranking) {
		toSerialize["useReranking"] = o.UseReranking
	}
	if !IsNil(o.EnableChangeTracking) {
		toSerialize["enableChangeTracking"] = o.EnableChangeTracking
	}
	return toSerialize, nil
}

func (o *CreateProjectRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProjectRequest := _CreateProjectRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateProjectRequest)

	if err != nil {
		return err
	}

	*o = CreateProjectRequest(varCreateProjectRequest)

	return err
}

type NullableCreateProjectRequest struct {
	value *CreateProjectRequest
	isSet bool
}

func (v NullableCreateProjectRequest) Get() *CreateProjectRequest {
	return v.value
}

func (v *NullableCreateProjectRequest) Set(val *CreateProjectRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectRequest(val *CreateProjectRequest) *NullableCreateProjectRequest {
	return &NullableCreateProjectRequest{value: val, isSet: true}
}

func (v NullableCreateProjectRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


