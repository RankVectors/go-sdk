/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportImplementationStatusRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportImplementationStatusRequest{}

// ReportImplementationStatusRequest struct for ReportImplementationStatusRequest
type ReportImplementationStatusRequest struct {
	// ID of the suggestion
	SuggestionId string `json:"suggestionId"`
	// Your RankVectors API key
	ApiKey string `json:"apiKey"`
	// Implementation status
	Status string `json:"status"`
}

type _ReportImplementationStatusRequest ReportImplementationStatusRequest

// NewReportImplementationStatusRequest instantiates a new ReportImplementationStatusRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportImplementationStatusRequest(suggestionId string, apiKey string, status string) *ReportImplementationStatusRequest {
	this := ReportImplementationStatusRequest{}
	this.SuggestionId = suggestionId
	this.ApiKey = apiKey
	this.Status = status
	return &this
}

// NewReportImplementationStatusRequestWithDefaults instantiates a new ReportImplementationStatusRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportImplementationStatusRequestWithDefaults() *ReportImplementationStatusRequest {
	this := ReportImplementationStatusRequest{}
	return &this
}

// GetSuggestionId returns the SuggestionId field value
func (o *ReportImplementationStatusRequest) GetSuggestionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuggestionId
}

// GetSuggestionIdOk returns a tuple with the SuggestionId field value
// and a boolean to check if the value has been set.
func (o *ReportImplementationStatusRequest) GetSuggestionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuggestionId, true
}

// SetSuggestionId sets field value
func (o *ReportImplementationStatusRequest) SetSuggestionId(v string) {
	o.SuggestionId = v
}

// GetApiKey returns the ApiKey field value
func (o *ReportImplementationStatusRequest) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *ReportImplementationStatusRequest) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *ReportImplementationStatusRequest) SetApiKey(v string) {
	o.ApiKey = v
}

// GetStatus returns the Status field value
func (o *ReportImplementationStatusRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ReportImplementationStatusRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ReportImplementationStatusRequest) SetStatus(v string) {
	o.Status = v
}

func (o ReportImplementationStatusRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportImplementationStatusRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["suggestionId"] = o.SuggestionId
	toSerialize["apiKey"] = o.ApiKey
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ReportImplementationStatusRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"suggestionId",
		"apiKey",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportImplementationStatusRequest := _ReportImplementationStatusRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportImplementationStatusRequest)

	if err != nil {
		return err
	}

	*o = ReportImplementationStatusRequest(varReportImplementationStatusRequest)

	return err
}

type NullableReportImplementationStatusRequest struct {
	value *ReportImplementationStatusRequest
	isSet bool
}

func (v NullableReportImplementationStatusRequest) Get() *ReportImplementationStatusRequest {
	return v.value
}

func (v *NullableReportImplementationStatusRequest) Set(val *ReportImplementationStatusRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReportImplementationStatusRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReportImplementationStatusRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportImplementationStatusRequest(val *ReportImplementationStatusRequest) *NullableReportImplementationStatusRequest {
	return &NullableReportImplementationStatusRequest{value: val, isSet: true}
}

func (v NullableReportImplementationStatusRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportImplementationStatusRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


