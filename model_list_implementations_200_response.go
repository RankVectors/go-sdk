/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
)

// checks if the ListImplementations200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListImplementations200Response{}

// ListImplementations200Response struct for ListImplementations200Response
type ListImplementations200Response struct {
	Success *bool `json:"success,omitempty"`
	Implementations []Implementation `json:"implementations,omitempty"`
	// Number of implementations returned
	Count *int32 `json:"count,omitempty"`
	// Applied filters
	Filters map[string]interface{} `json:"filters,omitempty"`
}

// NewListImplementations200Response instantiates a new ListImplementations200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListImplementations200Response() *ListImplementations200Response {
	this := ListImplementations200Response{}
	return &this
}

// NewListImplementations200ResponseWithDefaults instantiates a new ListImplementations200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListImplementations200ResponseWithDefaults() *ListImplementations200Response {
	this := ListImplementations200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ListImplementations200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImplementations200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ListImplementations200Response) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ListImplementations200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetImplementations returns the Implementations field value if set, zero value otherwise.
func (o *ListImplementations200Response) GetImplementations() []Implementation {
	if o == nil || IsNil(o.Implementations) {
		var ret []Implementation
		return ret
	}
	return o.Implementations
}

// GetImplementationsOk returns a tuple with the Implementations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImplementations200Response) GetImplementationsOk() ([]Implementation, bool) {
	if o == nil || IsNil(o.Implementations) {
		return nil, false
	}
	return o.Implementations, true
}

// HasImplementations returns a boolean if a field has been set.
func (o *ListImplementations200Response) HasImplementations() bool {
	if o != nil && !IsNil(o.Implementations) {
		return true
	}

	return false
}

// SetImplementations gets a reference to the given []Implementation and assigns it to the Implementations field.
func (o *ListImplementations200Response) SetImplementations(v []Implementation) {
	o.Implementations = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ListImplementations200Response) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImplementations200Response) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ListImplementations200Response) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ListImplementations200Response) SetCount(v int32) {
	o.Count = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ListImplementations200Response) GetFilters() map[string]interface{} {
	if o == nil || IsNil(o.Filters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImplementations200Response) GetFiltersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Filters) {
		return map[string]interface{}{}, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ListImplementations200Response) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]interface{} and assigns it to the Filters field.
func (o *ListImplementations200Response) SetFilters(v map[string]interface{}) {
	o.Filters = v
}

func (o ListImplementations200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListImplementations200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Implementations) {
		toSerialize["implementations"] = o.Implementations
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableListImplementations200Response struct {
	value *ListImplementations200Response
	isSet bool
}

func (v NullableListImplementations200Response) Get() *ListImplementations200Response {
	return v.value
}

func (v *NullableListImplementations200Response) Set(val *ListImplementations200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListImplementations200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListImplementations200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListImplementations200Response(val *ListImplementations200Response) *NullableListImplementations200Response {
	return &NullableListImplementations200Response{value: val, isSet: true}
}

func (v NullableListImplementations200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListImplementations200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


