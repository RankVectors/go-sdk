/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreditBalanceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditBalanceInfo{}

// CreditBalanceInfo struct for CreditBalanceInfo
type CreditBalanceInfo struct {
	// Project identifier
	ProjectId string `json:"projectId"`
	// Total credits purchased
	CreditsTotal float32 `json:"creditsTotal"`
	// Credits consumed
	CreditsUsed float32 `json:"creditsUsed"`
	// Credits remaining
	CreditsRemaining float32 `json:"creditsRemaining"`
	// Last credit reset timestamp
	LastResetAt *time.Time `json:"lastResetAt,omitempty"`
}

type _CreditBalanceInfo CreditBalanceInfo

// NewCreditBalanceInfo instantiates a new CreditBalanceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditBalanceInfo(projectId string, creditsTotal float32, creditsUsed float32, creditsRemaining float32) *CreditBalanceInfo {
	this := CreditBalanceInfo{}
	this.ProjectId = projectId
	this.CreditsTotal = creditsTotal
	this.CreditsUsed = creditsUsed
	this.CreditsRemaining = creditsRemaining
	return &this
}

// NewCreditBalanceInfoWithDefaults instantiates a new CreditBalanceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditBalanceInfoWithDefaults() *CreditBalanceInfo {
	this := CreditBalanceInfo{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *CreditBalanceInfo) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CreditBalanceInfo) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CreditBalanceInfo) SetProjectId(v string) {
	o.ProjectId = v
}

// GetCreditsTotal returns the CreditsTotal field value
func (o *CreditBalanceInfo) GetCreditsTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditsTotal
}

// GetCreditsTotalOk returns a tuple with the CreditsTotal field value
// and a boolean to check if the value has been set.
func (o *CreditBalanceInfo) GetCreditsTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsTotal, true
}

// SetCreditsTotal sets field value
func (o *CreditBalanceInfo) SetCreditsTotal(v float32) {
	o.CreditsTotal = v
}

// GetCreditsUsed returns the CreditsUsed field value
func (o *CreditBalanceInfo) GetCreditsUsed() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditsUsed
}

// GetCreditsUsedOk returns a tuple with the CreditsUsed field value
// and a boolean to check if the value has been set.
func (o *CreditBalanceInfo) GetCreditsUsedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsUsed, true
}

// SetCreditsUsed sets field value
func (o *CreditBalanceInfo) SetCreditsUsed(v float32) {
	o.CreditsUsed = v
}

// GetCreditsRemaining returns the CreditsRemaining field value
func (o *CreditBalanceInfo) GetCreditsRemaining() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreditsRemaining
}

// GetCreditsRemainingOk returns a tuple with the CreditsRemaining field value
// and a boolean to check if the value has been set.
func (o *CreditBalanceInfo) GetCreditsRemainingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsRemaining, true
}

// SetCreditsRemaining sets field value
func (o *CreditBalanceInfo) SetCreditsRemaining(v float32) {
	o.CreditsRemaining = v
}

// GetLastResetAt returns the LastResetAt field value if set, zero value otherwise.
func (o *CreditBalanceInfo) GetLastResetAt() time.Time {
	if o == nil || IsNil(o.LastResetAt) {
		var ret time.Time
		return ret
	}
	return *o.LastResetAt
}

// GetLastResetAtOk returns a tuple with the LastResetAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBalanceInfo) GetLastResetAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastResetAt) {
		return nil, false
	}
	return o.LastResetAt, true
}

// HasLastResetAt returns a boolean if a field has been set.
func (o *CreditBalanceInfo) HasLastResetAt() bool {
	if o != nil && !IsNil(o.LastResetAt) {
		return true
	}

	return false
}

// SetLastResetAt gets a reference to the given time.Time and assigns it to the LastResetAt field.
func (o *CreditBalanceInfo) SetLastResetAt(v time.Time) {
	o.LastResetAt = &v
}

func (o CreditBalanceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditBalanceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["creditsTotal"] = o.CreditsTotal
	toSerialize["creditsUsed"] = o.CreditsUsed
	toSerialize["creditsRemaining"] = o.CreditsRemaining
	if !IsNil(o.LastResetAt) {
		toSerialize["lastResetAt"] = o.LastResetAt
	}
	return toSerialize, nil
}

func (o *CreditBalanceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"creditsTotal",
		"creditsUsed",
		"creditsRemaining",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditBalanceInfo := _CreditBalanceInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditBalanceInfo)

	if err != nil {
		return err
	}

	*o = CreditBalanceInfo(varCreditBalanceInfo)

	return err
}

type NullableCreditBalanceInfo struct {
	value *CreditBalanceInfo
	isSet bool
}

func (v NullableCreditBalanceInfo) Get() *CreditBalanceInfo {
	return v.value
}

func (v *NullableCreditBalanceInfo) Set(val *CreditBalanceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditBalanceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditBalanceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditBalanceInfo(val *CreditBalanceInfo) *NullableCreditBalanceInfo {
	return &NullableCreditBalanceInfo{value: val, isSet: true}
}

func (v NullableCreditBalanceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditBalanceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


