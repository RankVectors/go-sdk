/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImplementationInstructions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImplementationInstructions{}

// ImplementationInstructions struct for ImplementationInstructions
type ImplementationInstructions struct {
	// Suggestion identifier
	SuggestionId string `json:"suggestionId"`
	// URL of the page to modify
	PageUrl string `json:"pageUrl"`
	// Text to turn into a link
	AnchorText string `json:"anchorText"`
	// URL to link to
	TargetUrl string `json:"targetUrl"`
	// Context where the link should be placed
	Context string `json:"context"`
	Instructions StepByStepInstructions `json:"instructions"`
}

type _ImplementationInstructions ImplementationInstructions

// NewImplementationInstructions instantiates a new ImplementationInstructions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImplementationInstructions(suggestionId string, pageUrl string, anchorText string, targetUrl string, context string, instructions StepByStepInstructions) *ImplementationInstructions {
	this := ImplementationInstructions{}
	this.SuggestionId = suggestionId
	this.PageUrl = pageUrl
	this.AnchorText = anchorText
	this.TargetUrl = targetUrl
	this.Context = context
	this.Instructions = instructions
	return &this
}

// NewImplementationInstructionsWithDefaults instantiates a new ImplementationInstructions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImplementationInstructionsWithDefaults() *ImplementationInstructions {
	this := ImplementationInstructions{}
	return &this
}

// GetSuggestionId returns the SuggestionId field value
func (o *ImplementationInstructions) GetSuggestionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuggestionId
}

// GetSuggestionIdOk returns a tuple with the SuggestionId field value
// and a boolean to check if the value has been set.
func (o *ImplementationInstructions) GetSuggestionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuggestionId, true
}

// SetSuggestionId sets field value
func (o *ImplementationInstructions) SetSuggestionId(v string) {
	o.SuggestionId = v
}

// GetPageUrl returns the PageUrl field value
func (o *ImplementationInstructions) GetPageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PageUrl
}

// GetPageUrlOk returns a tuple with the PageUrl field value
// and a boolean to check if the value has been set.
func (o *ImplementationInstructions) GetPageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageUrl, true
}

// SetPageUrl sets field value
func (o *ImplementationInstructions) SetPageUrl(v string) {
	o.PageUrl = v
}

// GetAnchorText returns the AnchorText field value
func (o *ImplementationInstructions) GetAnchorText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnchorText
}

// GetAnchorTextOk returns a tuple with the AnchorText field value
// and a boolean to check if the value has been set.
func (o *ImplementationInstructions) GetAnchorTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnchorText, true
}

// SetAnchorText sets field value
func (o *ImplementationInstructions) SetAnchorText(v string) {
	o.AnchorText = v
}

// GetTargetUrl returns the TargetUrl field value
func (o *ImplementationInstructions) GetTargetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value
// and a boolean to check if the value has been set.
func (o *ImplementationInstructions) GetTargetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetUrl, true
}

// SetTargetUrl sets field value
func (o *ImplementationInstructions) SetTargetUrl(v string) {
	o.TargetUrl = v
}

// GetContext returns the Context field value
func (o *ImplementationInstructions) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *ImplementationInstructions) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *ImplementationInstructions) SetContext(v string) {
	o.Context = v
}

// GetInstructions returns the Instructions field value
func (o *ImplementationInstructions) GetInstructions() StepByStepInstructions {
	if o == nil {
		var ret StepByStepInstructions
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *ImplementationInstructions) GetInstructionsOk() (*StepByStepInstructions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instructions, true
}

// SetInstructions sets field value
func (o *ImplementationInstructions) SetInstructions(v StepByStepInstructions) {
	o.Instructions = v
}

func (o ImplementationInstructions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImplementationInstructions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["suggestionId"] = o.SuggestionId
	toSerialize["pageUrl"] = o.PageUrl
	toSerialize["anchorText"] = o.AnchorText
	toSerialize["targetUrl"] = o.TargetUrl
	toSerialize["context"] = o.Context
	toSerialize["instructions"] = o.Instructions
	return toSerialize, nil
}

func (o *ImplementationInstructions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"suggestionId",
		"pageUrl",
		"anchorText",
		"targetUrl",
		"context",
		"instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImplementationInstructions := _ImplementationInstructions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImplementationInstructions)

	if err != nil {
		return err
	}

	*o = ImplementationInstructions(varImplementationInstructions)

	return err
}

type NullableImplementationInstructions struct {
	value *ImplementationInstructions
	isSet bool
}

func (v NullableImplementationInstructions) Get() *ImplementationInstructions {
	return v.value
}

func (v *NullableImplementationInstructions) Set(val *ImplementationInstructions) {
	v.value = val
	v.isSet = true
}

func (v NullableImplementationInstructions) IsSet() bool {
	return v.isSet
}

func (v *NullableImplementationInstructions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImplementationInstructions(val *ImplementationInstructions) *NullableImplementationInstructions {
	return &NullableImplementationInstructions{value: val, isSet: true}
}

func (v NullableImplementationInstructions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImplementationInstructions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


