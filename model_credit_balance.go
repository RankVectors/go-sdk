/*
RankVectors API

Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys 

API version: 1.2.0
Contact: support@rankvectors.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rankvectors

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreditBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditBalance{}

// CreditBalance struct for CreditBalance
type CreditBalance struct {
	Success bool `json:"success"`
	Balance CreditBalanceInfo `json:"balance"`
	PageLimit PageLimitStatus `json:"pageLimit"`
	SpendingLimit SpendingLimitStatus `json:"spendingLimit"`
	AutoRecharge AutoRechargeSettings `json:"autoRecharge"`
	CurrentPeriod PeriodCharges `json:"currentPeriod"`
	// Usage history (if requested)
	UsageHistory []UsageHistoryItem `json:"usageHistory,omitempty"`
}

type _CreditBalance CreditBalance

// NewCreditBalance instantiates a new CreditBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditBalance(success bool, balance CreditBalanceInfo, pageLimit PageLimitStatus, spendingLimit SpendingLimitStatus, autoRecharge AutoRechargeSettings, currentPeriod PeriodCharges) *CreditBalance {
	this := CreditBalance{}
	this.Success = success
	this.Balance = balance
	this.PageLimit = pageLimit
	this.SpendingLimit = spendingLimit
	this.AutoRecharge = autoRecharge
	this.CurrentPeriod = currentPeriod
	return &this
}

// NewCreditBalanceWithDefaults instantiates a new CreditBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditBalanceWithDefaults() *CreditBalance {
	this := CreditBalance{}
	return &this
}

// GetSuccess returns the Success field value
func (o *CreditBalance) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *CreditBalance) SetSuccess(v bool) {
	o.Success = v
}

// GetBalance returns the Balance field value
func (o *CreditBalance) GetBalance() CreditBalanceInfo {
	if o == nil {
		var ret CreditBalanceInfo
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetBalanceOk() (*CreditBalanceInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *CreditBalance) SetBalance(v CreditBalanceInfo) {
	o.Balance = v
}

// GetPageLimit returns the PageLimit field value
func (o *CreditBalance) GetPageLimit() PageLimitStatus {
	if o == nil {
		var ret PageLimitStatus
		return ret
	}

	return o.PageLimit
}

// GetPageLimitOk returns a tuple with the PageLimit field value
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetPageLimitOk() (*PageLimitStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageLimit, true
}

// SetPageLimit sets field value
func (o *CreditBalance) SetPageLimit(v PageLimitStatus) {
	o.PageLimit = v
}

// GetSpendingLimit returns the SpendingLimit field value
func (o *CreditBalance) GetSpendingLimit() SpendingLimitStatus {
	if o == nil {
		var ret SpendingLimitStatus
		return ret
	}

	return o.SpendingLimit
}

// GetSpendingLimitOk returns a tuple with the SpendingLimit field value
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetSpendingLimitOk() (*SpendingLimitStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpendingLimit, true
}

// SetSpendingLimit sets field value
func (o *CreditBalance) SetSpendingLimit(v SpendingLimitStatus) {
	o.SpendingLimit = v
}

// GetAutoRecharge returns the AutoRecharge field value
func (o *CreditBalance) GetAutoRecharge() AutoRechargeSettings {
	if o == nil {
		var ret AutoRechargeSettings
		return ret
	}

	return o.AutoRecharge
}

// GetAutoRechargeOk returns a tuple with the AutoRecharge field value
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetAutoRechargeOk() (*AutoRechargeSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRecharge, true
}

// SetAutoRecharge sets field value
func (o *CreditBalance) SetAutoRecharge(v AutoRechargeSettings) {
	o.AutoRecharge = v
}

// GetCurrentPeriod returns the CurrentPeriod field value
func (o *CreditBalance) GetCurrentPeriod() PeriodCharges {
	if o == nil {
		var ret PeriodCharges
		return ret
	}

	return o.CurrentPeriod
}

// GetCurrentPeriodOk returns a tuple with the CurrentPeriod field value
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetCurrentPeriodOk() (*PeriodCharges, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentPeriod, true
}

// SetCurrentPeriod sets field value
func (o *CreditBalance) SetCurrentPeriod(v PeriodCharges) {
	o.CurrentPeriod = v
}

// GetUsageHistory returns the UsageHistory field value if set, zero value otherwise.
func (o *CreditBalance) GetUsageHistory() []UsageHistoryItem {
	if o == nil || IsNil(o.UsageHistory) {
		var ret []UsageHistoryItem
		return ret
	}
	return o.UsageHistory
}

// GetUsageHistoryOk returns a tuple with the UsageHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBalance) GetUsageHistoryOk() ([]UsageHistoryItem, bool) {
	if o == nil || IsNil(o.UsageHistory) {
		return nil, false
	}
	return o.UsageHistory, true
}

// HasUsageHistory returns a boolean if a field has been set.
func (o *CreditBalance) HasUsageHistory() bool {
	if o != nil && !IsNil(o.UsageHistory) {
		return true
	}

	return false
}

// SetUsageHistory gets a reference to the given []UsageHistoryItem and assigns it to the UsageHistory field.
func (o *CreditBalance) SetUsageHistory(v []UsageHistoryItem) {
	o.UsageHistory = v
}

func (o CreditBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["balance"] = o.Balance
	toSerialize["pageLimit"] = o.PageLimit
	toSerialize["spendingLimit"] = o.SpendingLimit
	toSerialize["autoRecharge"] = o.AutoRecharge
	toSerialize["currentPeriod"] = o.CurrentPeriod
	if !IsNil(o.UsageHistory) {
		toSerialize["usageHistory"] = o.UsageHistory
	}
	return toSerialize, nil
}

func (o *CreditBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"balance",
		"pageLimit",
		"spendingLimit",
		"autoRecharge",
		"currentPeriod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditBalance := _CreditBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditBalance)

	if err != nil {
		return err
	}

	*o = CreditBalance(varCreditBalance)

	return err
}

type NullableCreditBalance struct {
	value *CreditBalance
	isSet bool
}

func (v NullableCreditBalance) Get() *CreditBalance {
	return v.value
}

func (v *NullableCreditBalance) Set(val *CreditBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditBalance(val *CreditBalance) *NullableCreditBalance {
	return &NullableCreditBalance{value: val, isSet: true}
}

func (v NullableCreditBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


